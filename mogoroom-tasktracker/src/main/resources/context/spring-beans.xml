<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"	
	xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="  
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.directwebremoting.org/schema/spring-dwr
		http://www.directwebremoting.org/schema/spring-dwr-3.0.xsd
		http://www.springframework.org/schema/data/mongo
        http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd 
        http://www.springframework.org/schema/task    http://www.springframework.org/schema/task/spring-task-3.0.xsd ">
 		

	<!-- 采用注释的方式配置bean -->  
	<context:component-scan base-package="com.mogoroom">
		<context:exclude-filter type="regex" expression="com.mogoroom.repo.*" />
		<context:exclude-filter type="regex" expression="com.mogoroom.facade.repo.*" />
		<context:exclude-filter type="regex" expression="com.mogoroom.facade.impl.repo.*" />
		<context:exclude-filter type="regex" expression="com.mogoroom.facade.vo.repo.*" />
	</context:component-scan>	
	
	<!-- tasktracker starter -->  
	<bean id="taskTrackerStarter" class="com.mogoroom.tasktracker.TaskTrackerStarter">
		<property name="registryAddress" value="${sysconfig.lts.tasktracker.registryAddress}"/>
		<property name="nodeGroup" value="${sysconfig.lts.tasktracker.nodeGroup}"/>
		<property name="clusterName" value="${sysconfig.lts.tasktracker.clusterName}"/>
		<property name="workThreads" value="${sysconfig.lts.tasktracker.workThreads}"/>
		<property name="monitorUrl" value="${sysconfig.lts.tasktracker.monitorUrl}"/>
		<property name="jobFailStore" value="${sysconfig.lts.tasktracker.jobFailStore}"/>
	</bean>	

	<!--proxy-target-class="true"强制使用cglib代理 如果为false则spring会自动选择 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />


	<!-- 配置文件位置 -->
    <bean id="propertyConfig" class="com.mogoroom.tasktracker.SpringPropertyExt"> 
          <property name="locations"> 
               <list> 
                    <value>${confFilePath}</value>
               </list> 
          </property> 
          <property name="fileEncoding">
		      <value>UTF-8</value>
		  </property>
    </bean> 
 

	<!--定义数据源BoneCP池 这个连接池 -->
	<bean id="dataSource" destroy-method="close"
		class="com.jolbox.bonecp.BoneCPDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 连接池中未使用的链接最大存活时间 -->
		<property name="idleMaxAgeInMinutes" value="${jdbc.idleMaxAgeInMinutes}" />
		<!-- 每个分区最大的连接数 -->
		<property name="maxConnectionsPerPartition" value="${jdbc.maxConnectionsPerPartition}" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="${jdbc.minConnectionsPerPartition}" />
		<!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定 -->
		<property name="partitionCount" value="${jdbc.partitionCount}" />
		<!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!-- 设置连接池阀值 -->
		<property name="poolAvailabilityThreshold" value="${jdbc.poolAvailabilityThreshold}"></property>
		<!-- 连接时间 -->
		<property name="connectionTimeoutInMs" value="${jdbc.connectionTimeoutInMs}"></property>
		
	</bean>
	
	<!--报表老数据源 -->
	<bean id="dataSource_old" destroy-method="close"
		class="com.jolbox.bonecp.BoneCPDataSource">
		<property name="driverClass" value="${jdbc.driverClassName_old}" />
		<property name="jdbcUrl" value="${jdbc.url_old}" />
		<property name="username" value="${jdbc.username_old}" />
		<property name="password" value="${jdbc.password_old}" />

		<!-- 连接池中未使用的链接最大存活时间 -->
		<property name="idleMaxAgeInMinutes" value="${jdbc.idleMaxAgeInMinutes}" />
		<!-- 每个分区最大的连接数 -->
		<property name="maxConnectionsPerPartition" value="${jdbc.maxConnectionsPerPartition}" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="${jdbc.minConnectionsPerPartition}" />
		<!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定 -->
		<property name="partitionCount" value="${jdbc.partitionCount}" />
		<!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!-- 设置连接池阀值 -->
		<property name="poolAvailabilityThreshold" value="${jdbc.poolAvailabilityThreshold}"></property>
		<!-- 连接时间 -->
		<property name="connectionTimeoutInMs" value="${jdbc.connectionTimeoutInMs}"></property>
	</bean>
	
	<!--特殊报表db -->
	<bean id="dataSource_bl" destroy-method="close"
		class="com.jolbox.bonecp.BoneCPDataSource">
		<property name="driverClass" value="${jdbc.driverClassName_bl}" />
		<property name="jdbcUrl" value="${jdbc.url_bl}" />
		<property name="username" value="${jdbc.username_bl}" />
		<property name="password" value="${jdbc.password_bl}" />

		<!-- 连接池中未使用的链接最大存活时间 -->
		<property name="idleMaxAgeInMinutes" value="${jdbc.idleMaxAgeInMinutes}" />
		<!-- 每个分区最大的连接数 -->
		<property name="maxConnectionsPerPartition" value="${jdbc.maxConnectionsPerPartition}" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="${jdbc.minConnectionsPerPartition}" />
		<!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定 -->
		<property name="partitionCount" value="${jdbc.partitionCount}" />
		<!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!-- 设置连接池阀值 -->
		<property name="poolAvailabilityThreshold" value="${jdbc.poolAvailabilityThreshold}"></property>
		<!-- 连接时间 -->
		<property name="connectionTimeoutInMs" value="${jdbc.connectionTimeoutInMs}"></property>
	</bean>
	
	<!--维金连接池 -->
	<bean id="dataSource_wj" destroy-method="close"
		class="com.jolbox.bonecp.BoneCPDataSource">
		<property name="driverClass" value="${jdbc.driverClassName_wj}" />
		<property name="jdbcUrl" value="${jdbc.url_wj}" />
		<property name="username" value="${jdbc.username_wj}" />
		<property name="password" value="${jdbc.password_wj}" />

		<!-- 连接池中未使用的链接最大存活时间 -->
		<property name="idleMaxAgeInMinutes" value="${jdbc.idleMaxAgeInMinutes}" />
		<!-- 每个分区最大的连接数 -->
		<property name="maxConnectionsPerPartition" value="${jdbc.maxConnectionsPerPartition}" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="${jdbc.minConnectionsPerPartition}" />
		<!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定 -->
		<property name="partitionCount" value="${jdbc.partitionCount}" />
		<!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!-- 设置连接池阀值 -->
		<property name="poolAvailabilityThreshold" value="${jdbc.poolAvailabilityThreshold}"></property>
		<!-- 连接时间 -->
		<property name="connectionTimeoutInMs" value="${jdbc.connectionTimeoutInMs}"></property>
	</bean>
	
	<!-- 多数据源配置 -->
	<bean id="multipleDataSource" class="com.mogoroom.facade.system.DynamicDataSource">
		<property name="targetDataSources">  
	        <map key-type="java.lang.String">
	        	<entry value-ref="dataSource" key="dataSource"/>  
	            <entry value-ref="dataSource_old" key="ds_old"/>  
	            <entry value-ref="dataSource_wj" key="ds_wj"></entry>
	            <entry value-ref="dataSource_bl" key="ds_bl"/>  
	        </map>  
	    </property>  
	    <!-- 默认使用原来的数据源 -->
	    <property name="defaultTargetDataSource" ref="dataSource"/>
	</bean>
		
	<!-- 配置mybitasSqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="multipleDataSource" />
		<property name="configLocation" value="classpath:context/mybatis.xml"></property>
		<property name="typeAliasesPackage" value="com.mogoroom.service.domain.city,com.mogoroom.service.domain.flat,com.mogoroom.service.domain.user,com.mogoroom.service.domain.orga" />  
		<property name="mapperLocations"  value="classpath*:com/mogoroom/service/*/dao/*Mapper.xml" /> 
	</bean>

	<!-- 配置SqlSessionTemplate -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<!-- 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="multipleDataSource" />
	</bean>
 

	<!-- 扫描 basePackage下所有的接口，根据对应的mapper.xml为其生成代理类-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mogoroom.service.*.dao" />
	</bean>
	
	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	
	<!-- 线程池 -->
	<bean id="taskExecutor"
	  class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
	  scope="singleton" lazy-init="true">
	  
	  <!-- 线程池维护线程的最少数量 -->
	  <property name="corePoolSize" value="${threadpool.corePoolSize}" />
	  
	  <!-- 线程池所使用的缓冲队列 -->
	  <property name="queueCapacity" value="${threadpool.queueCapacity}" />
	  
	  <!-- 线程池维护线程的最大数量 -->
	  <property name="maxPoolSize" value="${threadpool.maxPoolSize}" />
	  
	  <!-- 线程池维护线程所允许的空闲时间 -->
	  <property name="keepAliveSeconds" value="${threadpool.keepAliveSeconds}" />
	  <property name="rejectedExecutionHandler">
	 	 <bean class="${threadpool.rejectedExecutionHandler}" />
	  </property>
	  <!--作用是修改线程的名字-->
	  <property name="threadNamePrefix" value="${threadpool.threadNamePrefix}" />
	</bean>
	
	<!-- 系统配置文件 -->
	<bean id="mogoSystem" class="com.mogoroom.util.BaseMogoSystem">
		<property name="environment" value="${sysconfig.environment}"/> 
		<property name="phoneNum" value="${sysconfig.phoneNum}"/> 
		<property name="emailNum" value="${sysconfig.emailNum}"/>
		<property name="UPYUNSaveRootPath" value="${sysconfig.UPYUNSaveRootPath}"/> 
		<property name="nativeSaveRootPath" value="${sysconfig.nativeSaveRootPath}"/> 
		<property name="renterWeiJinAsynPath" value="${sysconfig.mogoRoot}"/> 
		<property name="partner_appkey" value="${sysconfig.partner_appkey}" />
		<property name="partner_masterSecret" value="${sysconfig.partner_masterSecret}" />
		<property name="renter_appkey" value="${sysconfig.renter_appkey}" />
		<property name="renter_masterSecret" value="${sysconfig.renter_masterSecret}" />
	
		<property name="contract_template" value="${sysconfig.contract.template}" />
		<property name="contract_contract" value="${sysconfig.contract.contract}" />
		<property name="contract_download" value="${sysconfig.contract.download}" />
	</bean>
	
	<!-- memcachedClient -->
	<bean id="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder" p:connectionPoolSize="50" p:failureMode="true">
		<!-- XMemcachedClientBuilder have two arguments.First is server list,and second is weights array. -->
		<constructor-arg>
			<list>
				<bean class="java.net.InetSocketAddress">
					<constructor-arg>
						<value>${memcached.server1.host}</value>
					</constructor-arg>
					<constructor-arg>
						<value>${memcached.server1.port}</value>
					</constructor-arg>
				</bean>
			</list>
		</constructor-arg>
		<constructor-arg>
			<list>
				<value>${memcached.server1.weight}</value>
			</list>
		</constructor-arg>
		<property name="commandFactory">
			<bean class="net.rubyeye.xmemcached.command.TextCommandFactory" />
		</property>
		<property name="sessionLocator">
			<bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator" />
		</property>
		<property name="transcoder">
			<bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" />
		</property>
	</bean>
	<bean id="memcachedClient" factory-bean="memcachedClientBuilder" factory-method="build" destroy-method="shutdown" />
	
	<!-- 获取spring容器，以访问容器中定义的其他bean，可在任何代码任何地方任何时候中取出ApplicaitonContext -->
    <bean id="springContext" class="com.mogoroom.util.MogoSpringContextUtil"></bean>
    
   
    
</beans>